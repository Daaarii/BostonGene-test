{"version":3,"sources":["components/BoardForm/BoardForm.js","components/Ad/Ad.js","components/AdsList/AdsList.js","components/Board/Board.js","App.js","serviceWorker.js","index.js"],"names":["BoardForm","state","title","text","phoneNumber","city","colorName","titleVal","phoneNumberVal","onChangePhoneNumberHandler","e","currentTarget","value","match","setState","onChangeTitleHandler","length","onChangeHandler","name","addNewAd","this","props","className","type","maxlength","style","borderColor","onChange","placeholder","disabled","onClick","Component","ad","deleteAd","index","ads","map","key","Math","random","preventDefault","unshift","splice","App","Boolean","window","location","hostname","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.ffc2d991.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\n\r\nimport './BoardForm.css';\r\n\r\nexport default class BoardForm extends Component {\r\n\r\n    state = {\r\n        title: '',\r\n        text: '',\r\n        phoneNumber: '+7',\r\n        city: '',\r\n        colorName: '',\r\n        titleVal: false,\r\n        phoneNumberVal: false,\r\n    }\r\n\r\n    onChangePhoneNumberHandler = (e) => {\r\n        if (e.currentTarget.value.match(/\\+79[0-9]{9}/g)) {\r\n            this.setState({phoneNumber: e.currentTarget.value, phoneNumberVal: true});\r\n        }\r\n        else {\r\n            this.setState({phoneNumber: e.currentTarget.value, phoneNumberVal: false});\r\n        }\r\n    }\r\n\r\n    onChangeTitleHandler = (e) => {\r\n        if (e.currentTarget.value.length > 0) {\r\n            this.setState({title: e.currentTarget.value, titleVal: true});\r\n        }\r\n        else {\r\n            this.setState({title: e.currentTarget.value, titleVal: false});\r\n        }\r\n    }\r\n\r\n    onChangeHandler = (e) => {\r\n        this.setState({[e.currentTarget.name]: e.currentTarget.value});\r\n    }\r\n\r\n    render() {\r\n        const { addNewAd } = this.props;\r\n        const { title, text, phoneNumber, city, titleVal, phoneNumberVal } = this.state;\r\n        return (\r\n            <form className=\"board-form\">\r\n                <div>\r\n                    <span>Заголовок:</span>\r\n                    <input \r\n                        value={title} \r\n                        type=\"text\" \r\n                        name=\"title\" \r\n                        maxlength=\"140\" \r\n                        style={this.state.titleVal ? null : {borderColor: 'red'}} \r\n                        onChange={this.onChangeTitleHandler} \r\n                    />\r\n                </div>\r\n                <div>\r\n                    <span>Информация о товаре:</span>\r\n                    <textarea value={text} name=\"text\" maxlength=\"300\" onChange={this.onChangeHandler} />\r\n                </div>\r\n                <div>\r\n                    <span>Телефон:</span>\r\n                    <input \r\n                        value={phoneNumber} \r\n                        type=\"text\" \r\n                        name=\"phoneNumber\" \r\n                        placeholder=\"Формат: +7 (ххх) ххх-хх-хх\" \r\n                        style={this.state.phoneNumberVal ? null : {borderColor: 'red'}} \r\n                        onChange={this.onChangePhoneNumberHandler} \r\n                    />\r\n                </div>\r\n                <div>\r\n                    <span>Выберите город:</span>\r\n                    <div className=\"city-select\">\r\n                        <select value={city} name=\"city\" onChange={this.onChangeHandler}>\r\n                            <option value=''></option>\r\n                            <option value='Москва'>\r\n                                Москва\r\n                            </option>\r\n                            <option value='Санкт-Петербург'>\r\n                                Санкт-Петербург\r\n                            </option>\r\n                            <option value='Казань'>\r\n                                Казань\r\n                            </option>\r\n                            <option value='Нижний Новгород'>\r\n                                Нижний Новгород\r\n                            </option>\r\n                        </select>\r\n                    </div>\r\n                </div>\r\n                <div className=\"required\">* - обязательное поле</div>\r\n                <button \r\n                    disabled={!(titleVal && phoneNumberVal)} \r\n                    onClick={(e) => addNewAd(title, text, phoneNumber, city, e)}\r\n                >\r\n                    Опубликовать объявление\r\n                </button>\r\n            </form>\r\n        )\r\n    }\r\n}","import React from 'react';\r\n\r\nimport './Ad.css';\r\n\r\nexport default (props) => {\r\n    const { title, text, phoneNumber, city } = props.ad; \r\n    const { deleteAd, index } = props;\r\n\r\n    return (\r\n        <div className=\"ad\">\r\n            <div className=\"ad-title\">{ title }</div>\r\n            <div className=\"ad-info\">\r\n                <div className=\"ad-text\">{ text }</div>\r\n                <div className=\"ad-number\">Номер: { phoneNumber }</div>\r\n                <div className=\"ad-city\">Город: { city }</div> \r\n            </div>\r\n            <div className=\"ad-delete\" onClick={(e) => deleteAd(index, e)}>&#10006;</div>\r\n        </div>\r\n    )\r\n}","import React from 'react';\r\n\r\nimport Ad from '../Ad/Ad';\r\n\r\nimport './AdsList.css';\r\n\r\nexport default (props) => {\r\n    const { ads, deleteAd } = props;\r\n\r\n    return (\r\n        <div className=\"board-ads\">\r\n            {ads.map((ad, index) => \r\n                <Ad ad={ad} deleteAd={deleteAd} index={index} key={Math.random()}/>\r\n            )}   \r\n        </div>\r\n    )\r\n}","import React, { Component } from 'react';\r\n\r\nimport BoardForm from '../BoardForm/BoardForm';\r\nimport AdsList from '../AdsList/AdsList';\r\n\r\nimport './Board.css';\r\n\r\nexport default class extends Component {\r\n\r\n    state = {\r\n        ads: [\r\n            {\r\n                title: 'Skoda Octavia 2013 год',\r\n                text: 'Продам skoda octavia, пробег 105000, по корпусу есть мелкие царапины, в дтп не был',\r\n                phoneNumber: '+78005553535',\r\n                city: 'Москва',\r\n            },\r\n            {\r\n                title: 'iphone X',\r\n                text: 'Продам iphone X, новый, коробка не вскрывалась',\r\n                phoneNumber: '+78005553535',\r\n                city: 'Москва',\r\n            },\r\n            {\r\n                title: '1',\r\n                text: 'Продам iphone X, новый, коробка не вскрывалась',\r\n                phoneNumber: '+78005553535',\r\n                city: 'Москва',\r\n            },\r\n            {\r\n                title: '2',\r\n                text: 'Продам iphone X, новый, коробка не вскрывалась',\r\n                phoneNumber: '+78005553535',\r\n                city: 'Москва',\r\n            }\r\n        ]\r\n    }\r\n\r\n    addNewAd = (title, text, phoneNumber, city, e) => {\r\n        e.preventDefault();\r\n        const ads = [...this.state.ads];\r\n        ads.unshift({title, text, phoneNumber, city});\r\n        this.setState({ ads });\r\n    }\r\n\r\n    deleteAd = (index) => {\r\n        const ads = [...this.state.ads];\r\n        ads.splice(index, 1);\r\n        this.setState({ ads });\r\n    }\r\n\r\n    render() { \r\n        const { ads } = this.state;\r\n        return (\r\n            <div className=\"board\">\r\n                <BoardForm addNewAd={this.addNewAd} />\r\n                <AdsList deleteAd={this.deleteAd} ads={ads} />\r\n            </div> \r\n        )\r\n    }  \r\n}\r\n","import React from 'react';\nimport './App.css';\n\nimport Board from './components/Board/Board';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Board />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\nserviceWorker.unregister();\n"],"sourceRoot":""}